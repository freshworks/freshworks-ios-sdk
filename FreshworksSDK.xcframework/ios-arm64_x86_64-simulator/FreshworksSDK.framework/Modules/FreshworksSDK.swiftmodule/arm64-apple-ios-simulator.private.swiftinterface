// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name FreshworksSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
@_exported import FreshworksSDK
import Swift
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public protocol FreshworksJWTDelegate : AnyObject {
  func userStateChanged(_ userState: FreshworksSDK.UserState)
}
public enum UserState : Swift.String {
  case authenticated, created, loaded, identified, restored, unloaded
  case notLoaded
  case notCreated
  case notAuthenticated
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct AnyCodable : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
extension FreshworksSDK.AnyCodable : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
public let FW_EMPTY_STR: Swift.String
public enum FWEvents : Swift.String, Swift.CaseIterable {
  case restoreIdGenerated, userCreated, unreadCount, messageSent, messageReceived, csatUpdated, csatReceived, downloadFile, userCleared
  public init?(rawValue: Swift.String)
  public typealias AllCases = [FreshworksSDK.FWEvents]
  public typealias RawValue = Swift.String
  public static var allCases: [FreshworksSDK.FWEvents] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct User : Swift.Codable {
  public var firstName: Swift.String? {
    get
  }
  public var lastName: Swift.String? {
    get
  }
  public var email: Swift.String? {
    get
  }
  public var phone: Swift.String? {
    get
  }
  public var phoneCountry: Swift.String? {
    get
  }
  public var identifier: Swift.String? {
    get
  }
  public var restoreId: Swift.String? {
    get
  }
  public var meta: [Swift.String : Swift.String] {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class WidgetStateManager {
  @objc deinit
}
public struct SDKConfig : Swift.Codable {
  public var appId: Swift.String
  public var appKey: Swift.String
  public var domain: Swift.String
  public var source: Swift.String
  public var widgetId: Swift.String
  public var externalId: Swift.String
  public var restoreId: Swift.String
  public var locale: Swift.String
  public var config: FreshworksSDK.Configuration
  public var jwtAuthToken: Swift.String {
    get
  }
  public init(source: Swift.String, appID: Swift.String, appKey: Swift.String, domain: Swift.String, widgetId: Swift.String = FW_EMPTY_STR, externalId: Swift.String = FW_EMPTY_STR, restoreId: Swift.String = FW_EMPTY_STR, locale: Swift.String = FW_EMPTY_STR, jwtAuthToken: Swift.String? = FW_EMPTY_STR, config: FreshworksSDK.Configuration = Configuration())
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Configuration : Swift.Codable {
  public var content: [Swift.String : FreshworksSDK.AnyCodable]
  public var headerProperty: [Swift.String : FreshworksSDK.AnyCodable]
  public var fullscreen: Swift.Bool
  public var showFAQOnOpen: Swift.Bool
  public var faqPopupView: Swift.Bool
  public var disableNotifications: Swift.Bool
  public var disableEvents: Swift.Bool
  public init(showFAQOnOpen: Swift.Bool = false, faqPopupView: Swift.Bool = false, disableNotifications: Swift.Bool = false, disableEvents: Swift.Bool = false, content: [Swift.String : FreshworksSDK.AnyCodable] = [:], headerProperty: [Swift.String : FreshworksSDK.AnyCodable] = [:])
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum FAQFilterType : Swift.String, Swift.Codable {
  case category
  case article
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct FAQOptions : Swift.Codable {
  public var tags: [Swift.String]
  public var filterType: FreshworksSDK.FAQFilterType
  public init(tags: [Swift.String], filterType: FreshworksSDK.FAQFilterType)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class Freshworks : FreshworksSDK.WidgetStateManager {
  public static let shared: FreshworksSDK.Freshworks
  @objc deinit
}
extension FreshworksSDK.Freshworks {
  final public func initializeFreshworksSDK(with model: FreshworksSDK.SDKConfig)
  final public func showConversations(_ viewController: UIKit.UIViewController, convTags: [Swift.String] = [])
  final public func showFAQs(_ viewController: UIKit.UIViewController, faqOptions: FreshworksSDK.FAQOptions? = nil)
  final public func changeWidgetLanguage(locale code: Swift.String)
  final public func changeUserLanguage(locale code: Swift.String)
  final public func openConversation(_ viewController: UIKit.UIViewController, conversationReferenceId: Swift.String, topicName: Swift.String)
  final public func getUnreadCount() -> Swift.Int
  final public func setConversationProperties(jsonString: Swift.String)
  final public func setBotVariables(jsonString: Swift.String)
  final public func getSDKVersion() -> Swift.String
  final public func dismissFreshworksSDKViews()
  final public func updateConfig(headerProperty: [Swift.String : Any]?, contentProperty: [Swift.String : Any]?)
}
extension FreshworksSDK.Freshworks {
  final public func setPushRegistrationToken(_ deviceToken: Foundation.Data)
  final public func isFreshworksNotification(_ response: [Swift.AnyHashable : Any]) -> Swift.Bool
  final public var isFreshworksConversationScreenVisible: Swift.Bool {
    get
  }
  final public func handleRemoteNotification(_ response: [Swift.AnyHashable : Any], _ completionHandler: @escaping () -> Swift.Void)
}
extension FreshworksSDK.Freshworks {
  final public func getUser(onFailure: ((any Swift.Error) -> Swift.Void)? = nil, onSuccess: @escaping (FreshworksSDK.User) -> Swift.Void)
  final public func setUserDetails(firstName: Swift.String? = nil, lastName: Swift.String? = nil, email: Swift.String? = nil, phone: Swift.String? = nil, phoneCountry: Swift.String? = nil, customProperties: [Swift.String : Swift.String] = [:])
  final public func identifyUser(externalId: Swift.String, restoreId: Swift.String? = FW_EMPTY_STR)
  final public func resetUser(completion: (() -> Swift.Void)? = nil)
  final public func trackUserEvents(name: Swift.String, payload: [Swift.String : Swift.String]? = nil)
}
extension FreshworksSDK.Freshworks {
  final public func setJWTDelegate(_ delegate: (any FreshworksSDK.FreshworksJWTDelegate)?)
  final public func getUUID(onSuccess: @escaping (Swift.String) -> Swift.Void, onFailure: ((any Swift.Error) -> Swift.Void)? = nil)
  final public func updateUser(_ jwt: Swift.String)
}
extension FreshworksSDK.UserState : Swift.Equatable {}
extension FreshworksSDK.UserState : Swift.Hashable {}
extension FreshworksSDK.UserState : Swift.RawRepresentable {}
extension FreshworksSDK.FWEvents : Swift.Equatable {}
extension FreshworksSDK.FWEvents : Swift.Hashable {}
extension FreshworksSDK.FWEvents : Swift.RawRepresentable {}
extension FreshworksSDK.FAQFilterType : Swift.Equatable {}
extension FreshworksSDK.FAQFilterType : Swift.Hashable {}
extension FreshworksSDK.FAQFilterType : Swift.RawRepresentable {}
